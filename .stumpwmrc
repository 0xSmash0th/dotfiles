;; -*- Mode: Lisp -*-
;;; .stumpwmrc --- StumpWM Init File

(in-package :stumpwm)

;; debugging output
(setf stumpwm::*debug-level* 10)
(redirect-all-output (data-dir-file
                      (format nil "debug-output-~d" (get-universal-time)) "txt"))

(message "Loading rc...")
(run-shell-command "rm .xsession-errors") ; clear this so any errors are from this session only

;; Swank -- for interactive WM Hacking
(load "~/.emacs.d/elpa/slime/swank-loader.lisp")
(defparameter *swank-p* NIL)
(swank-loader:init)
(defcommand swank () ()
  (unless *swank-p*
    (ignore-errors
     (setf stumpwm:*top-level-error-action* :break)
     (swank:create-server :port 4040
                          :style swank:*communication-style*
                          :dont-close t)
     (echo-string (current-screen)
                  "Starting swank. M-x slime-connect RET 4040 RET, then (in-package stumpwm).")
     (setq *swank-p* t))))
(swank)

;; prefer s-w to C-t
(set-prefix-key (kbd "s-w"))

;; using groups as independent workspaces; don't want RoR to pull me to another group
(setq *run-or-raise-all-groups* NIL)

;; keybinds!
(defcommand urxvtc (&optional new-window) (:y-or-n)
  (if new-window
      (run-shell-command "urxvtcd")
      (run-or-raise "urxvtcd" '(:class "URxvt"))))
(defcommand st (&optional new-window) (:y-or-n)
            (if new-window
                (run-shell-command "st -e tmux new")
                (run-or-raise "st -e tmux attach" '(:class "st"))))
(define-key *root-map* (kbd "c") "st")
(define-key *root-map* (kbd "C-c") "st t")
;; (define-key *root-map* (kbd "C-c") "urxvtc t")

(defcommand emacs (&optional new) (:y-or-n)
  (let ((command "emacsclient -c"))
    (if new
        (run-shell-command command)
        (run-or-raise command '(:class "Emacs")))))
(define-key *root-map* (kbd "e") "emacs")
(define-key *root-map* (kbd "C-e") "emacs t")

(defcommand chromium () ()
  (run-or-raise "chromium" '(:instance "chromium")))
(defcommand new-chromium () ()
  (run-shell-command "chromium --new-window"))

(defcommand firefox (&optional (new-window nil)) (:y-or-n)
  "Open firefox. If the optional new-window parameter is non-nil, opens a new
window."
  (if new-window
      (run-shell-command "firefox -new-window")
      (run-or-raise "firefox" '(:class "Firefox"))))
(define-key *root-map* (kbd "b") "firefox")
(define-key *root-map* (kbd "C-b") "firefox t")

(defcommand evince () ()
  (run-or-raise "evince" '(:class "Evince")))
(define-key *root-map* (kbd "a") "evince")

(defcommand music () ()
  "Open the music player. Right now, that's banshee."
  (run-or-raise "banshee" '(:class "Banshee")))


;; mail
;; (defcommand switch-to-mail () ()
;;   (switch-to-group (find-group (current-screen) "mail")))

;; power control commands
(defcommand suspend () ()
  (run-shell-command "dbus-send --system --print-reply --dest=\"org.freedesktop.UPower\" /org/freedesktop/UPower org.freedesktop.UPower.Suspend"))
(defcommand reboot () ()
  (run-shell-command "shutdown -r 0"))
(defcommand poweroff () ()
  (run-shell-command "shutdown -P 0"))

(defvar *powerctl-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "s") "suspend")
    (define-key m (kbd "r") "reboot")
    (define-key m (kbd "p") "poweroff")
    m))

(define-key *root-map* (kbd "s-p") '*powerctl-map*)

(define-key *root-map* (kbd "m") "switch-to-mail")

(define-key *root-map* (kbd "C-g") "abort")

;; fonts! - not AA'd - looks awful w/o that
;; (set-font "-adobe-source code pro medium-medium-r-normal--17-120-100-100-m-0-adobe-standard")

;; time display
(defun pretty-time ()
  (defun stringify-dow (dow)
    (nth dow '("Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday")))
  (defun stringify-month (month)
    (nth (- month 1) '("January" "February" "March" "April"
                 "May" "June" "July" "August"
                 "September" "October" "November" "December")))
  (multiple-value-bind (second minute hour date month year dow dst-p tz)
      (get-decoded-time)
    (format NIL "~2,'0d:~2,'0d:~2,'0d ~a, ~d ~a ~d (GMT ~@d)"
            hour minute second
            (stringify-dow dow)
            date (stringify-month month)
            year (- tz))))

(defcommand echo-time () ()
  (echo (pretty-time)))

(define-key *root-map* (kbd "t") "echo-time")

;; switch key layouts - sometimes other people need to type on my machine
(defparameter *colemak-p* t)

(defcommand switch-key-layouts () ()
  (if *colemak-p*
      (run-shell-command "setxkbmap us")
      (run-shell-command "setxkbmap us -variant colemak"))
  (setq *colemak-p* (not *colemak-p*)))

(define-key *root-map* (kbd "C-M-k") "switch-key-layouts")

;; fix window and frame borders. By default there is a white border around one
;; frame in a dual-monitor setup. This changes it, making everything silky
;; smooth ^.^
(setq *window-border-style* :thick)

(defvar *bg-color* (xlib:make-color :red (/ 32 256) :green (/ 32 256) :blue (/ 32 256)))
(set-focus-color *bg-color*)

;; contrib modules
;; multimedia-keys
(load "~/.stumpwm.d/multimedia-keys.lisp")
;; MPD
;; (load-module "mpd")
(load "~/.stumpwm.d/contrib/mpd.lisp")
(define-key *root-map* (kbd "s-m") '*mpd-map*)
(define-key *top-map* (kbd "XF86AudioPlay") "mpd-toggle-pause")
(define-key *top-map* (kbd "XF86AudioStop") "mpd-stop")
(define-key *top-map* (kbd "XF86AudioNext") "mpd-next")
(define-key *top-map* (kbd "XF86AudioPrev") "mpd-prev")
;; Window Hiding


(load "~/.stumpwm.d/hide-windows.lisp")
(define-key *root-map* (kbd "C-h") "toggle-hide-window")


;; machine-specific commands
(when (equal (machine-instance) "Vorringia")
  (load "~/.stumpwm.d/vorringia.lisp"))
(when (equal (machine-instance) "Outland")
  (load "~/.stumpwm.d/outland.lisp"))
(when (equal (machine-instance) "smithjd")
  (load "~/.stumpwm.d/smithjd.lisp"))

;; .stumpwrc ends here
