* Packaging & Custom
  Following the style from
  [[https://github.com/jhenahan/emacs.d/blob/master/emacs-init.org]]
** Cask
   Set up cask.
   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
     (require 'pallet)
     (pallet-mode t)
   #+END_SRC
** req-package
   Use =req-package= to define package dependencies (including automagical
   autoloads)
   #+BEGIN_SRC emacs-lisp
     (require 'req-package)
     (put 'req-package 'lisp-indent-function 'defun)
     (put 'req-package-force 'lisp-indent-function 'defun)
     (customize-set-variable 'use-package-verbose t)
   #+END_SRC
** el-get

   =el-get= because melpa is not the universe (though it's pretty close).
   #+BEGIN_SRC emacs-lisp
     (req-package el-get
       :init
       (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes"))
   #+END_SRC

** custom.el
   Use a separate custom file for settings because nobody wants that in
   =init.el=.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file)
   #+END_SRC

* Theme

** Colors
   I have a custom (heavily modified) zenburn that I use. Load that.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'zenburn t)
   #+END_SRC

** Modeline

   I use =smart-mode-line= because Powerline clashes with the smooth, flat look
   I have going on.

   #+BEGIN_SRC emacs-lisp
     (req-package smart-mode-line
       :init
       (setq sml/theme 'respectful)
       (sml/setup)
       (column-number-mode))
   #+END_SRC
* Modes
** Evil Modes
*** Evil's Root

    Evil is love. Evil is life. All hail Evil.

    #+BEGIN_SRC emacs-lisp
      (req-package evil
        :require (undo-tree ace-jump-mode)
        :ensure evil
        :init
        (evil-mode 1)
        (dolist (mode '(mu4e-main-mode
                        mu4e-headers-mode
                        mu4e-view-mode
                        woman-mode
                        help-mode
                        cider-stacktrace-mode
                        flycheck-error-list-mode
                        epa-info-mode
                        paradox-menu-mode
                        image-mode
                        emms-browser-mode
                        special-mode))
          (add-to-list 'evil-emacs-state-modes mode))
        (add-to-list 'evil-insert-state-modes 'cider-repl-mode)
        :config
        (defun evil-global-set-noninsert-key (key cmd)
          "Bind `KEY' to `CMD' in all non-insert evil states."
          (dolist (state '(normal motion visual))
            (evil-global-set-key state key cmd)))
        ;; colemak motion bindings
        (evil-global-set-noninsert-key "e" #'evil-backward-char)
        (evil-global-set-noninsert-key "n" #'evil-forward-char)
        (evil-global-set-noninsert-key "s" #'evil-previous-line)
        (evil-global-set-noninsert-key "t" #'evil-next-line)
        (evil-global-set-noninsert-key "l" #'evil-find-char-to)
        (evil-global-set-noninsert-key "L" #'evil-find-char-to-backward)
        (evil-global-set-noninsert-key "r" #'evil-search-next)
        (evil-global-set-noninsert-key "k" #'evil-forward-word-end)
        (evil-global-set-noninsert-key "K" #'evil-forward-WORD-end)

        (evil-global-set-noninsert-key (kbd "M-a") 'evil-beginning-of-line)
        (evil-global-set-noninsert-key (kbd "M-o") 'evil-end-of-line)

        (evil-global-set-key 'insert (kbd "C-t") 'transpose-chars)
        (evil-global-set-key 'visual (kbd "u") #'undo-tree-undo)
        (evil-global-set-key 'motion (kbd "SPC") #'evil-ace-jump-word-mode)

        ;; colemak window motion
        (define-key 'evil-window-map (kbd "n") #'evil-window-right)
        (define-key 'evil-window-map (kbd "e") #'evil-window-left)
        (define-key 'evil-window-map (kbd "s") #'evil-window-up)
        (define-key 'evil-window-map (kbd "t") #'evil-window-down)

        ;; additional extended commands
        (evil-ex-define-cmd "k[ill]" #'kill-this-buffer)
        (evil-ex-define-cmd "t[angle]" #'org-babel-tangle))
    #+END_SRC

    #+RESULTS:
    : -1

*** =evil-surround=

    Surround ALL the things!

    #+BEGIN_SRC emacs-lisp
      (req-package evil-surround
        :init (global-evil-surround-mode 1))
    #+END_SRC
** Language Modes
*** JavaScript

    =js2-mode= is the end-all be-all of javascript support.

    #+BEGIN_SRC emacs-lisp
      (req-package js2-mode
        :require (tern)
        :mode "\\.js$"
        :config
        (add-hook 'js2-mode-hook #'subword-mode)
        (add-hook 'js2-mode-hook #'tern-mode))
    #+END_SRC
*** HTML & Friends

    =web-mode= has some questionable backend code and -- in my opinion -- bites
    off more than it can chew. But in terms of HTML modes, it is exceptional.

    #+BEGIN_SRC emacs-lisp
      (req-package web-mode
        :mode "\\.html?$")
    #+END_SRC

*** Scheme (Racket)

    =geiser= provides REPL and doc support in scheme buffers, while
    =quack= gives enhanced support for Racket.

    #+BEGIN_SRC emacs-lisp
      (req-package geiser
        :config
        (add-hook 'scheme-mode-hook #'enable-paredit-mode)
        (add-hook 'geiser-repl-mode-hook #'enable-paredit-mode))

      (req-package quack)
    #+END_SRC

*** Python

    Python was such a pain in the ass to figure out. I finally drank
    the kool-aid and installed elpy, which as it happens provides
    company support.

    #+BEGIN_SRC emacs-lisp
      (req-package elpy
        :commands elpy-mode
        :bind (:map elpy-mode-map
                    ("C-<right>" . nil)
                    ("C-<left>" . nil)
                    ("M-<up>" . nil)
                    ("C-<up>" . nil))
        :init
        (add-hook 'python-mode-hook #'elpy-mode)
        :config
        (elpy-enable))
    #+END_SRC

*** Rust

    Rust is a cool language ^.^ It has decent emacs support too!

    =rust-mode= is what you'd expect. =racer= provides completion
    support. Unfortunately, =racer= depends on having the original
    rust source, a custom rust binary, and a matching version of
    =racer.el= available so I'm not using =req-package= for it at this
    time. I might put together a =racer-git= el-get recipe for it
    that'll handle pulling all of that down, but I'll deal with that
    later.

    #+BEGIN_SRC emacs-lisp
      (req-package racer
        :config
        (setq racer-rust-src-path "~/Code/rust/src")
        (setq racer-cmd "~/.cargo/bin/racer"))
      (req-package flycheck-rust
        :init
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
      (req-package rust-mode
        :require (racer flycheck-rust smartparens)
        :config
        (add-hook 'rust-mode-hook #'racer-activate)
        (add-hook 'rust-mode-hook #'smartparens-strict-mode))
    #+END_SRC

*** Clojure

    #+BEGIN_SRC emacs-lisp
      (req-package clojure-mode
        :mode "\\.(clj|cljs|boot)$")
      (req-package cider
        :commands cider-mode
        :init
        (add-hook 'clojure-mode-hook #'cider-mode))
    #+END_SRC

*** Pixie

    #+BEGIN_SRC emacs-lisp
      (req-package pixie-mode)

    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (req-package haskell-mode
        :require ghc
        :mode "\\.hs\\'"
        :config
        (add-to-list 'load-path "~/.stack/snapshots/x86_64-linux/lts-6.9/7.10.3/share/x86_64-linux-ghc-7.10.3/ghc-mod-5.5.0.0/elisp/")
        (add-hook 'haskell-mode-hook #'ghc-init))

      (defun evil-disable-auto-indent ()
        (setq-local evil-auto-indent nil))

      (req-package ghc
        :commands (ghc-init ghc-debug))
    #+END_SRC

*** C/C++

    #+BEGIN_SRC emacs-lisp
      (add-hook 'c-mode-hook #'semantic-mode)
      (add-hook 'c++-mode-hook #'semantic-mode)
    #+END_SRC

    Add a project...
    #+BEGIN_SRC emacs-lisp
      (autoload #'ede-minor-mode "ede")
      (with-eval-after-load 'ede
        (ede-cpp-root-project "Gram"
                              :name "Gram"
                              :file "~/Code/gram/Makefile"
                              :system-include-path '("/usr/include/guile/2.0/")))
    #+END_SRC

*** Cap'n Proto

    The mode for this is not in ELPA, not in EL-GET and not included
    in the debian package. Eww.

    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'el-get
      (add-to-list 'el-get-sources '(:name capnp-mode
                                           :type http
                                           :url "https://github.com/sandstorm-io/capnproto/raw/master/highlighting/emacs/capnp-mode.el"
                                           :after (add-to-list 'auto-mode-alist '("\\.capnp\\'" . capnp-mode)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (req-package capnp-mode
        :loader el-get)
    #+END_SRC


*** OCaml

    This depends on Merlin being installed through OPAM.

    #+BEGIN_SRC emacs-lisp
      ;; (setq opam-share (substring (shell-command-to-string "opam config var share 2> /dev/null") 0 -1))
      ;; (add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))

      ;; (req-package merlin
      ;;   :loader :path
      ;;   :require tuareg
      ;;   :init
      ;;   (add-hook 'tuareg-mode-hook 'merlin-mode t)
      ;;   (add-hook 'caml-mode-hook 'merlin-mode t)
      ;;   :config
      ;;  (setq merlin-command 'opam))
    #+END_SRC
** Utility Modes
*** =helm=

    You know why you're using helm.

    #+BEGIN_SRC emacs-lisp
      (req-package helm
        :diminish (helm-mode . "")
        :bind (("M-x" . helm-M-x)
               ("C-x C-f" . helm-find-files)
               ("M-y" . helm-show-kill-ring)
               ("C-x b" . helm-mini))
        :init
        (require 'helm-config)
        :config
        (helm-mode 1))
    #+END_SRC

*** =tramp=

    Remote file editing ftw

    #+BEGIN_SRC emacs-lisp
      (req-package tramp
        :config
        (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp)))
    #+END_SRC

*** =hideshow=

    =hideshow= provides fairly universal code-folding
    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'hs-minor-mode)
      (with-eval-after-load "hideshow"
        (bind-key "C-c s h" #'hs-hide-block hs-minor-mode-map)
        (bind-key "C-c s s" #'hs-show-block hs-minor-mode-map)
        (bind-key "C-c s a" #'hs-hide-all hs-minor-mode-map)
        (bind-key "C-c s A" #'hs-show-all hs-minor-mode-map)
        (bind-key "C-c h" #'hs-toggle-hiding hs-minor-mode-map))
    #+END_SRC

*** =flyspell=

    #+BEGIN_SRC emacs-lisp
      (req-package flyspell
        :init
        (add-hook 'text-mode-hook #'flyspell-mode)
        (add-hook 'prog-mode-hook #'flyspell-prog-mode))
    #+END_SRC

*** =flycheck=

    #+BEGIN_SRC emacs-lisp
      (req-package flycheck)
    #+END_SRC

*** =auto-fill-mode=

    Fit text to 80 columns. Because that's the kind of world we live in.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'text-mode-hook #'turn-on-auto-fill)
    #+END_SRC

*** =projectile=

    Projectile: project management for those that wish to remain above the
    depraved.

    #+BEGIN_SRC emacs-lisp
      (req-package projectile
        :require helm-projectile
        :init
        (defun projectile-enable-unless-tramp ()
          "Enables `projectile-mode` unless in a TRAMP buffer."
          (unless (and (buffer-file-name)
                       (file-remote-p (buffer-file-name)))
            (projectile-mode 1)))

        (add-hook 'prog-mode-hook #'projectile-enable-unless-tramp)
        :config
        (setq tags-revert-without-query t)
        (defun projectile-custom-test-suffix (project-type)
          "Get custom test suffixes based on `PROJECT-TYPE'."
          (cond
           ((member project-type '(gulp grunt npm)) "_spec")
           (t (projectile-test-suffix project-type)))))
    #+END_SRC

*** =magit=

    #+BEGIN_SRC emacs-lisp
      (req-package magit
        :bind ("C-c m" . magit-status))
    #+END_SRC

*** =multiple-cursors=

    #+BEGIN_SRC emacs-lisp
      (req-package multiple-cursors
        :bind (("C-c L" . mc/edit-lines)
               ("C-c N" . mc/mark-next-like-this)
               ("C-c P" . mc/mark-previous-like-this)
               ("C-c A" . mc/mark-all-like-this)))
    #+END_SRC

*** =company-mode=

    Autocompletion. Not a fan of =auto-complete-mode=.

    #+BEGIN_SRC emacs-lisp
      (req-package company
        :init
        (add-hook 'after-init-hook #'global-company-mode))
    #+END_SRC

*** =paredit=

    The ultimate in parenthetical editing!

    #+BEGIN_SRC emacs-lisp
      (req-package paredit
        :init
        (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
        (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
        (add-hook 'lisp-mode-hook #'enable-paredit-mode)
        (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
        ;trying moving clojure stuff to smartparens
        )
    #+END_SRC

*** =yasnippet=

    # #+BEGIN_SRC emacs-lisp
    #   (req-package yasnippet
    #     :init (add-hook 'prog-mode-hook #'yas-minor-mode))
    # #+END_SRC

*** =org-mode=

    #+BEGIN_SRC emacs-lisp
      ;(req-package org
      ;  :config
      ;  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
    #+END_SRC

    Hacking around Org's lack of inline image background support.

    #+BEGIN_SRC emacs-lisp
      (defcustom org-inline-image-background nil
        "The color used as the default background for inline images.
        When nil, use the default face background."
        :group 'org
        :type '(choice color (const nil)))

      ;;; literally copypasta from org.el.gz
      (defun org-display-inline-images (&optional include-linked refresh beg end)
        "Display inline images.
      Normally only links without a description part are inlined, because this
      is how it will work for export.  When INCLUDE-LINKED is set, also links
      with a description part will be inlined.  This can be nice for a quick
      look at those images, but it does not reflect what exported files will look
      like.
      When REFRESH is set, refresh existing images between BEG and END.
      This will create new image displays only if necessary.
      BEG and END default to the buffer boundaries."
        (interactive "P")
        (when (display-graphic-p)
          (unless refresh
            (org-remove-inline-images)
            (if (fboundp 'clear-image-cache) (clear-image-cache)))
          (save-excursion
            (save-restriction
          (widen)
          (setq beg (or beg (point-min)) end (or end (point-max)))
          (goto-char beg)
          (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                    (substring (org-image-file-name-regexp) 0 -2)
                    "\\)\\]" (if include-linked "" "\\]")))
                (case-fold-search t)
                old file ov img type attrwidth width)
            (while (re-search-forward re end t)
              (setq old (get-char-property-and-overlay (match-beginning 1)
                                   'org-image-overlay)
                file (expand-file-name
                  (concat (or (match-string 3) "") (match-string 4))))
              (when (image-type-available-p 'imagemagick)
                (setq attrwidth (if (or (listp org-image-actual-width)
                            (null org-image-actual-width))
                        (save-excursion
                          (save-match-data
                            (when (re-search-backward
                               "#\\+attr.*:width[ \t]+\\([^ ]+\\)"
                               (save-excursion
                                 (re-search-backward "^[ \t]*$\\|\\`" nil t)) t)
                          (string-to-number (match-string 1))))))
                  width (cond ((eq org-image-actual-width t) nil)
                      ((null org-image-actual-width) attrwidth)
                      ((numberp org-image-actual-width)
                       org-image-actual-width)
                      ((listp org-image-actual-width)
                       (or attrwidth (car org-image-actual-width))))
                  type (if width 'imagemagick)))
              (when (file-exists-p file)
                (if (and (car-safe old) refresh)
                (image-refresh (overlay-get (cdr old) 'display))
              (setq img (save-match-data (create-image file type nil :width width :background org-inline-image-background)))
              (when img
                (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                (overlay-put ov 'display img)
                (overlay-put ov 'face 'default)
                (overlay-put ov 'org-image-overlay t)
                (overlay-put ov 'modification-hooks
                         (list 'org-display-inline-remove-overlay))
                (push ov org-inline-image-overlays))))))))))
    #+END_SRC

*** =smartparens=

    #+BEGIN_SRC emacs-lisp
      (req-package smartparens
        :init
        (add-hook 'js2-mode-hook #'smartparens-strict-mode)
        (add-hook 'c-mode-hook #'smartparens-strict-mode)
        (add-hook 'c++-mode-hook #'smartparens-strict-mode)
        (add-hook 'python-mode-hook #'smartparens-strict-mode)
        (add-hook 'clojure-mode-hook #'smartparens-strict-mode)
        (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)
        :config
        (require 'smartparens-config)
        (sp-local-pair '(clojure-mode cider-repl-mode) "'" nil :actions nil))
    #+END_SRC

    And =evil= integration:

    # #+BEGIN_SRC emacs-lisp
    #   (req-package evil-smartparens
    #     :init
    #     (add-hook 'smartparens-strict-mode-hook #'evil-smartparens-mode)
    #     :config
    #     (evil-define-key 'normal evil-smartparens-mode-map (kbd "s") nil))
    # #+END_SRC
*** =emms=

    Hooking =emms= into mpd so that I can actually view my library.
    Not a huge fan of =emms= in general, but it is better than going
    through =mpc= all the time.

    #+BEGIN_SRC emacs-lisp
      (req-package emms
        :commands (emms-smart-browse emms-browser)
        :config
        (require 'emms-player-mpd)
        (emms-all)
        (add-to-list 'emms-info-functions #'emms-info-mpd)
        (add-to-list 'emms-player-list #'emms-player-mpd))
    #+END_SRC
*** =markdown-mode=

    My markdown settings finally got to the point that merely having
    it installed is no longer enough. I want to enable =pandoc-mode=
    when in Markdown mode 99% of the time, and also want to disable
    underscores for italics because most of my references use _ to
    delimit fields.

    #+BEGIN_SRC emacs-lisp
      (req-package markdown-mode
        :require pandoc-mode
        :config
        (add-hook 'markdown-mode-hook #'pandoc-mode)
        (setq markdown-regex-italic "\\(?:^\\|[^\\]\\)\\(\\([*]\\)\\([^ \n    \\]\\|[^ \n ]\\(?:.\\|\n[^\n]\\)*?[^\\ ]\\)\\(\\2\\)\\)"))
    #+END_SRC
*** =helm-swoop=

    #+BEGIN_SRC emacs-lisp
      (req-package helm-swoop
        :bind (:map evil-motion-state-map
               ("M-i" . helm-swoop-from-evil-search)))
    #+END_SRC
* Miscellaneous Customizations
** Mouse Paste Behavior
   I want =S-<insert>= to behave like most other Linux programs.

   #+BEGIN_SRC emacs-lisp
     (setq mouse-yank-at-point t)
     (global-set-key (kbd "S-<insert>") (lambda ()
                                          (interactive)
                                          (mouse-yank-primary (point))))
   #+END_SRC

** Unfill Paragraph

   Sometimes filling to column 80 isn't what one wants.

   #+BEGIN_SRC emacs-lisp
     (defun unfill-paragraph ()
       "Undo `fill-paragraph'."
       (interactive)
       (let ((fill-column (point-max)))
         (fill-paragraph nil)))

     (bind-key "M-Q" #'unfill-paragraph)
   #+END_SRC

** Revert All Buffers

   #+BEGIN_SRC emacs-lisp
     (defun revert-all-buffers ()
       "Reverts all unmodified file buffers."
       (interactive)
       (dolist (buf (buffer-list))
         (with-current-buffer buf
           (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
             (revert-buffer t t t))))
       (message "Refreshed all unmodified file buffers."))

     (bind-key "C-c C-r" #'revert-all-buffers)
   #+END_SRC

** Uniquify

   Automagically prefix multiple files with the same name with their containing
   directories. This is the alternative to "A<2>" "A<3>", etc.

   #+BEGIN_SRC emacs-lisp
   (require 'uniquify)
   #+END_SRC

** Indentation

   4 spaces. Speak not of tabs within these walls.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 4)
   #+END_SRC

** Startup Screen

   Disable the emacs welcome screen.

   #+BEGIN_SRC emacs-lisp
     (setq-default inhibit-startup-screen t)
   #+END_SRC

** =*scratch*=

   Set =*scratch*= to have an empty message by default.

   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message "")
   #+END_SRC

** Replace Strings

   #+BEGIN_SRC emacs-lisp
     (bind-key "C-c r" #'replace-regexp)
     (bind-key "C-c M-r" #'replace-regexp)     ; legacy binding because I'm likely to hit it
   #+END_SRC

** Compilation

   #+BEGIN_SRC emacs-lisp
     (bind-key "C-c c" #'compile)
   #+END_SRC

*** bury compilation buffer

    #+BEGIN_SRC emacs-lisp
      (defun bury-compile-buffer-if-successful (buffer string)
        "Bury a compilation buffer if succeeded without warnings "
        (if (and
             (string-match "compilation" (buffer-name buffer))
             (string-match "finished" string))
            (run-with-timer 1 nil (lambda (buf)
                                    (quit-window nil (get-buffer-window buf)))
                            buffer)))
      (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
    #+END_SRC
** Un-disabled fns

   #+BEGIN_SRC emacs-lisp
     (put 'scroll-left 'disabled nil)
     (put 'narrow-to-page 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'downcase-region 'disabled nil)
   #+END_SRC

** systemd

   systemd has like a bajillion file extensions, all of which are
   =conf-unix-mode=.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
   #+END_SRC

** mu4e

   mu4e is a pretty good mail system built on =mu=, a tool to search
   local Maildirs. It's very fast (which is awesome) and also has
   decent support for threading and multiple accounts.

   On debian, I need to add the load path:
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (autoload 'mu4e "mu4e"
       "If mu4e is not running yet, start it. Then, show the the main
     window, unless BACKGROUND (prefix-argument) is non-nil."
       t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'mu4e
       (require 'smtpmail)
       (require 'mu4e-contrib)

       (setq user-full-name "J David Smith")

       (defun mu4e-address-from-header (header)
         (string-match "<\\(.+\\)>" header)
         (match-string 1 header))

       (defun mu4e-account-for (address)
         (if (s-contains? "@" address)
             (cadr (s-split "@" address))
           address))

       (defun mu4e-account-field (address field)
         (let* ((account (mu4e-account-for address))
                (flist (cdr (assoc account mu4e-account-alist))))
           (cadr (assoc field flist))))

       (defun mu4e-sent-folder (msg)
         (or
          (mu4e-account-field (mu4e-address-from-header (message-field-value "From")) 'sent-folder)
          (f-join
           "/"
           (mu4e-account-for (mu4e-address-from-header (message-field-value "From")))
           "Sent")))

       (defun mu4e-trash-folder (msg)
         (or
          (mu4e-account-field (cadr (s-split "/" (mu4e-message-field msg :maildir))) 'trash-folder)
          (f-join
           (f-dirname (mu4e-message-field msg :maildir))
           "Trash")))

       (setq mu4e-maildir       "~/Mail/"
             mu4e-drafts-folder "/drafts"
             mu4e-sent-folder   #'mu4e-sent-folder
             mu4e-trash-folder  #'mu4e-trash-folder)

       (defvar mu4e-account-alist
         '(("archlinux.us"
            (mu4e-drafts-folder "/archlinux.us/Drafts")  ; changed from [Gmail].Drafts because these buggers don't get deleted properly
            (trash-folder "/archlinux.us/\[Gmail\]/Trash")
            (user-mail-address "emallson@archlinux.us")
            (smtpmail-default-smtp-server "smtp.gmail.com")
            (smtpmail-smtp-server "smtp.gmail.com")
            (smtpmail-stream-type starttls)
            (smtpmail-smtp-service 587))
           ("atlanis.net"
            (mu4e-drafts-folder "/atlanis.net/Drafts")
            (user-mail-address "emallson@atlanis.net")
            (smtpmail-default-smtp-server "smtp.atlanis.net")
            (smtpmail-smtp-server "smtp.atlanis.net")
            (smtpmail-stream-type starttls)
            (smtpmail-smtp-service 587))
           ("cs.uky.edu"
            (mu4e-drafts-folder "/cs.uky.edu/Drafts")
            (mu4e-sent-folder "/cs.uky.edu/Sent")
            (user-mail-address "emallson@cs.uky.edu")
            (smtpmail-default-smtp-server "mail.cs.uky.edu")
            (smtpmail-smtp-server "mail.cs.uky.edu")
            (smtpmail-stream-type starttls)
            (smtpmail-smtp-service 587))
           ("ufl.edu"
            (mu4e-drafts-folder "/ufl.edu/Drafts")
            (mu4e-sent-folder "/ufl.edu/Sent Items")
            (trash-folder "/ufl.edu/Deleted Items")
            (user-mail-address "emallson@ufl.edu")
            (smtpmail-default-smtp-server "smtp.office365.com")
            (smtpmail-smtp-server "smtp.office365.com")
            (smtpmail-stream-type starttls)
            (smtpmail-smtp-service 587))
           ("cise.ufl.edu"
            (mu4e-drafts-folder "/cise.ufl.edu/Drafts")
            (mu4e-sent-folder "/cise.ufl.edu/Sent")
            (user-mail-address "jdsmith@cise.ufl.edu")
            (smtpmail-default-smtp-server "mail.cise.ufl.edu")
            (smtpmail-smtp-server "mail.cise.ufl.edu")
            (smtpmail-stream-type ssl)
            (smtpmail-smtp-service 465))))

       (defun mu4e-on-compose-set-account ()
         "Set the account to use when composing a message."
         (let* ((account
                 (if mu4e-compose-parent-message
                     (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                       (string-match "/\\(.*?\\)/" maildir)
                       (match-string 1 maildir))
                   (completing-read (format "Compose with account: (%s) "
                                            (mapconcat 'car mu4e-account-alist " "))
                                    (mapcar 'car mu4e-account-alist)
                                    nil t nil nil (caar mu4e-account-alist))))
                (account-vars (cdr (assoc account mu4e-account-alist))))
           (if account-vars
               (mapc (lambda (var)
                       (set (car var) (cadr var)))
                     account-vars)
             (error "No email account found"))))

       (add-hook 'mu4e-compose-pre-hook 'mu4e-on-compose-set-account)

       (defun mu4e-behavior-delete-when-gmail ()
         (if (string= (message-sendmail-envelope-from) "emallson@archlinux.us")
             'delete 'sent))

       (setq mu4e-sent-messages-behavior #'mu4e-behavior-delete-when-gmail)

       (setq mu4e-maildir-shortcuts
             '(("/archlinux.us/INBOX" . ?i)
               ("/atlanis.net/INBOX" . ?a)
               ("/cs.uky.edu/INBOX" . ?c)
               ("/ufl.edu/INBOX" . ?u)
               ("/cise.ufl.edu/INBOX" . ?j)))

       (setq message-send-mail-function 'smtpmail-send-it)

       (defun mu4e-all-accounts-maildir (subdir)
         "Returns the mu search for maildir:/*/`subdir'."
         (string-join (mapcar (lambda (account)
                                (concat "maildir:\"/" account "/" subdir "\""))
                              (mapcar #'car mu4e-account-alist))
                      " or "))

       (unless (fboundp 'mu4e-bookmark-define)
         (defun mu4e-bookmark-define (query title key)
           (add-to-list 'mu4e-bookmarks (list query title key) nil
                        (lambda (a b)
                          (equal (nth 2 a)
                                  (nth 2 b))))))

       (setq mu4e-bookmarks '())
       (mu4e-bookmark-define "flag:flagged" "Flagged" ?f)
       (mu4e-bookmark-define (concat "flag:unread AND (" (mu4e-all-accounts-maildir "INBOX") ")")
                             "Inbox Unread" ?u)
       (mu4e-bookmark-define (mu4e-all-accounts-maildir "INBOX")
                             "Combined Inbox" ?i)

       (add-to-list 'mu4e-view-actions
                    '("open in browser" . mu4e-action-view-in-browser) t)

       (setq message-kill-buffer-on-exit t)

       (setq mu4e-html2text-command 'mu4e-shr2text)

       ;; add format=flowed to outgoing email. this *should* make them
       ;; easier to read on mobile, but in practice not sure whether it
       ;; hurts or helps because it seems to break things like lists.
       (add-hook 'mu4e-compose-mode-hook
                 (defun cpb-compose-setup ()
                   "Outgoing mails get format=flowed."
                   (use-hard-newlines t 'guess)))

       ;; this helps prevents UID problems with mbsync
       (customize-set-variable 'mu4e-change-filenames-when-moving t))
   #+END_SRC
** Remove TAGS from capf

   I have no idea why, but on some projects
   =tags-completion-at-point-functions= just hangs forever. I don't
   really use tags except on C/C++ projects where I can manually
   enable it in mode-specific stuff, so I'm removing it from the
   default.

   #+BEGIN_SRC emacs-lisp
     (setq-default completion-at-point-functions
                   (remove #'tags-completion-at-point-function completion-at-point-functions))
   #+END_SRC

** Unicode Support

   Emacs has built-in unicode support, of course. However, the default
   setup gives most unicode glyphs something like 3x line-height. This
   is obnoxious because I want to have abbrevs set up for characters
   like π without having them break my +carefully constructed+
   haphazard-but-functional typographic setup.

   #+BEGIN_SRC emacs-lisp
     (req-package unicode-fonts
       :init (unicode-fonts-setup))
   #+END_SRC
** Pretty Symbols
   Now that I have proper unicode support, time to use it!

   Most compilers don't actually like unicode symbols very much >.>

   Emacs to the rescue! Using `prettify-symbols-mode` to /display/ the
   correct symbol instead of the text without actually changing the
   text.

   #+BEGIN_SRC emacs-lisp
     (defvar greek-symbols-alist)
     (setq greek-symbols-alist
           '(("lambda" . ?λ)
             ("omega" . ?ω)
             ("rho" . ?ρ)
             ("delta" . ?Δ) ; using the capital here because I almost never want the small delta
             ("nabla" . ?∇) ; not actually a greek letter hue
             ))
   #+END_SRC

   As far as I know, I /always/ want these on. Maybe I'll stick to
   programming modes for now...

   Anyway, apparently =prettify-symbols-mode= demands WORDS not
   SUBSTRINGS. This is unfortunate. Rolling my own...

   # #+BEGIN_SRC emacs-lisp
   #   (req-package 'ov)
   #   (require 'ov)                           ; TODO: there is a req-package key for this

   #   (defcustom symbol-overlay-alist nil
   #     "Alist used to overlay symbols in `symbol-overlay-mode'. Each
   #     key should be a regexp, and each value should be the string to
   #     be displayed in the overlay."
   #     :type 'alist
   #     :group 'symbol-overlay)

   #   (defun symbol-overlay-modification-hook (overlay afterp _beg _end &optional len)
   #     (let ((inhibit-modification-hooks t))
   #       (if afterp
   #           (unless (= len 0)
   #             (delete-overlay overlay)))))

   #   (defun symbol-overlay-within-line (pair)
   #     (let* ((regexp (car pair))
   #            (replacement (cdr pair))
   #            (overlay (ov-regexp regexp (line-beginning-position) (line-end-position))))
   #       (ov-set overlay
   #               'category 'symbol-overlay
   #               'display (if (characterp replacement)
   #                            (char-to-string replacement)
   #                          replacement)
   #               'modification-hooks '(symbol-overlay-modification-hook))))

   #   (defun symbol-overlay-current-line (_beg _end _len)
   #     (save-excursion
   #       (ov-clear 'category 'symbol-overlay (line-beginning-position) (line-end-position))
   #       (-flatten (mapcar #'symbol-overlay-within-line symbol-overlay-alist))))

   #   (defun symbol-overlay-buffer (&optional no-clearp)
   #     "Overlay the entire buffer. If `no-clearp' is nil, clear
   #     overlays with category `symbol-overlay' first."
   #     (interactive)
   #     (save-excursion
   #       (unless no-clearp
   #         (ov-clear 'category 'symbol-overlay))
   #       (while (not (eobp))
   #         (symbol-overlay-current-line nil nil nil)
   #         (forward-line))))

   #   (define-minor-mode symbol-overlay-mode
   #     "Display symbols in overlays replacing regexps.

   #   Please don't shoot yourself in the foot. Use fast regexps. All
   #   regexps are (currently) limited to matching within a line."
   #     :lighter " §"
   #     (if (not (null symbol-overlay-mode))
   #         (progn
   #           (symbol-overlay-buffer t)
   #           (add-hook 'after-change-functions #'symbol-overlay-current-line t t))
   #       (progn (ov-clear 'category 'symbol-overlay)
   #              (remove-hook 'after-change-functions #'symbol-overlay-current-line t))))
   # #+END_SRC

   # And now we turn it on with greek symbols in =prog-mode=.

   # #+BEGIN_SRC emacs-lisp
   #   (defun prog-mode-pretty-symbols ()
   #     (setq-local symbol-overlay-alist greek-symbols-alist))

   #   (add-hook 'prog-mode-hook #'symbol-overlay-mode)
   #   (add-hook 'prog-mode-hook #'prog-mode-pretty-symbols)
   # #+END_SRC

* Monkey Patches
** semantic-c-do-lex-if

   <2016-01-24 Sun>
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'semantic/bovine/c
       (defun semantic-c-do-lex-if ()
         "Handle lexical CPP if statements.
     Enables a takeover of some hideif functions, then uses hideif to
     evaluate the #if expression and enables us to make decisions on which
     code to parse."
         ;; Enable our advice, and use hideif to parse.
         (let* ((semantic-c-takeover-hideif nil)
                (hif-ifx-regexp (concat hif-cpp-prefix "\\(elif\\|if\\(n?def\\)?\\)[ \t]+"))
                (parsedtokelist
                 (condition-case nil
                     ;; This is imperfect, so always assume on error.
                     (hif-canonicalize)
                   (error nil))))

           (let ((eval-form (eval parsedtokelist)))
             (if (or (not eval-form)
                     (and (numberp eval-form)
                          (equal eval-form 0)));; ifdef line resulted in false

                 ;; The if indicates to skip this preprocessor section
                 (let ((pt nil))
                   (semantic-push-parser-warning (format "Skip %s" (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
                                                 (point-at-bol) (point-at-eol))
                   (beginning-of-line)
                   (setq pt (point))
                   ;; This skips only a section of a conditional.  Once that section
                   ;; is opened, encountering any new #else or related conditional
                   ;; should be skipped.
                   (semantic-c-skip-conditional-section)
                   (setq semantic-lex-end-point (point))

                   ;; @TODO -somewhere around here, we also need to skip
                   ;; other sections of the conditional.

                   nil)
               ;; Else, don't ignore it, but do handle the internals.
               (end-of-line)
               (setq semantic-lex-end-point (point))
               nil)))))
   #+END_SRC
* Finalé

  Let =req-package= scurry off and do all the hard work.

  #+BEGIN_SRC emacs-lisp
    (req-package-finish)
  #+END_SRC
